# -*- coding: utf-8 -*-
"""Image Classification

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xZ8jWN5r59J4b70UYdOU6hFEkYUbuMiy
"""

import keras

from keras.datasets import cifar10

import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split

(x_train, y_train) , (x_test, y_test)= cifar10.load_data()

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import BatchNormalization
from keras.layers import Dropout
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.utils import np_utils      #will help in converting labels into categorical 
from keras.layers import Flatten
from keras.layers import Activation
from keras.optimizers import Adam
from keras.metrics import categorical_accuracy

x_train.shape

x_train[0,:,:,:]

x_train = x_train/255.0
x_test= x_test/255.0

x_train[0,:,:,:]

y_train.shape

y_train[0:]

y_train= np_utils.to_categorical(y_train)
y_test= np_utils.to_categorical(y_test)

y_train.shape

y_train[0:]

model = Sequential()

model.add(Conv2D(32,(3,3), strides=(1, 1),input_shape=(32,32,3), padding='same',activation='relu'))
model.add(Dropout(.2))

model.add(Conv2D(32,(3,3), strides=(1, 1), padding='same',activation='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(64,(3,3), strides=(1, 1), padding='same',activation='relu'))
model.add(Dropout(.2))

model.add(Conv2D(64,(3,3), strides=(1, 1), padding='same',activation='relu'))
model.add(Dropout(.2))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2)))


model.add(Conv2D(128,(3,3), strides=(1, 1), padding='same',activation='relu'))
model.add(Dropout(.2))

model.add(Conv2D(128,(3,3), strides=(1, 1), padding='same',activation='relu'))
model.add(Dropout(.2))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(256,(3,3), strides=(1, 1), padding='same',activation='relu'))
model.add(Dropout(.2))

model.add(Conv2D(256,(3,3), strides=(1, 1), padding='same',activation='relu'))
model.add(Dropout(.2))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.2))

model.add(Dense(128, activation='relu'))
model.add(Dropout(0.2))

model.add(Dense(10, activation='softmax'))

#maxnorm(m) will, if the L2-Norm of your weights exceeds m, scale your whole weight matrix by a factor that reduces the norm to m.

model.summary()

from keras.optimizers import Adam
Adam= Adam(0.01)

model.compile(optimizer='Adam', loss='categorical_crossentropy', metrics=['accuracy'])

model.fit(x_train, y_train, batch_size=32, epochs=10, validation_data=(x_test, y_test))

model.fit(x_train, y_train, batch_size=64, epochs=8, validation_data=(x_test, y_test))

_,acc=model.evaluate(x_test,y_test)
print(acc*100)

model.save("model_18epoch.h5")

model.fit(x_train, y_train, batch_size=128, epochs=7, validation_data=(x_test, y_test))

model.save("model_25epoch.h5")

model.fit(x_train, y_train, batch_size=224, epochs=5, validation_data=(x_test, y_test))

model.save("model_30epoch.h5")

results={
   0:'aeroplane',
   1:'automobile',
   2:'bird',
   3:'cat',
   4:'deer',
   5:'dog',
   6:'frog',
   7:'horse',
   8:'ship',
   9:'truck'
}

from PIL import Image
import numpy as np
im=Image.open("/content/p.jpeg")
# the input image is required to be in the shape of dataset, i.e (32,32,3)
 
im=im.resize((32,32))
im=np.expand_dims(im,axis=0)
im=np.array(im)
pred=model.predict_classes([im])[0]
print(pred,results[pred])

from PIL import Image
import numpy as np
im=Image.open("/content/c.jpeg")
# the input image is required to be in the shape of dataset, i.e (32,32,3)
 
im=im.resize((32,32))
im=np.expand_dims(im,axis=0)
im=np.array(im)
pred=model.predict_classes([im])[0]
print(pred,results[pred])


# It was cat but model predicted Dog.

